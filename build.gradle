
buildscript {
    

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {
        

    }

}

allprojects {
    apply plugin: "eclipse"

    version = '1.0'
    ext {
        appName = "Through Worlds"
        gdxVersion = '1.12.1'
        roboVMVersion = '2.3.21'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
    }

}

project(":desktop") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    }
}

project(":core") {
    apply plugin: "java-library"


    dependencies {
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        implementation 'com.fasterxml.jackson.core:jackson-core:2.6.3'
        implementation 'com.fasterxml.jackson.core:jackson-annotations:2.6.3'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
        implementation 'org.projectlombok:lombok:1.16.6'
    }
   /* jar {
        manifest {
            attributes "Main-Class": "com.throughworlds.ThroughServer"
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }*/
    jar {
        manifest {
            attributes 'Main-Class': 'com.throughworlds.ThroughServer'
        }
        from {
            configurations.runtimeClasspath.setCanBeResolved(true)
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'

    }
}



